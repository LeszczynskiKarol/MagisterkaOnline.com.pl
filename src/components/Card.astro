---
interface Props {
  title?: string;
  href?: string;
  icon?: string;
  variant?: 'default' | 'bordered' | 'elevated';
}

const { title, href, icon, variant = 'default' } = Astro.props;

const variantClasses = {
  default: 'bg-white shadow-sm hover:shadow-md',
  bordered: 'bg-white border-2 border-gray-200 hover:border-primary-500',
  elevated: 'bg-white shadow-md hover:shadow-xl',
};

const Tag = href ? 'a' : 'div';
---

<Tag
  href={href}
  class={`card ${variantClasses[variant]} ${href ? 'cursor-pointer' : ''}`}
>
  {icon && (
    <div class="mb-4">
      <div class="inline-flex items-center justify-center w-12 h-12 rounded-lg bg-primary-100 text-primary-600">
        <Fragment set:html={icon} />
      </div>
    </div>
  )}
  
  {title && (
    <h3 class="text-xl font-bold text-gray-900 mb-3">
      {title}
    </h3>
  )}
  
  <div class="text-gray-600">
    <slot />
  </div>
  
  {href && (
    <div class="mt-4 flex items-center text-primary-600 font-medium text-sm group-hover:text-primary-700">
      Dowiedz się więcej
      <svg class="w-4 h-4 ml-1 transition-transform group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </div>
  )}
</Tag>